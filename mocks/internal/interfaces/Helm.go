// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/Cray-HPE/loftsman/internal/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// Helm is an autogenerated mock type for the Helm type
type Helm struct {
	mock.Mock
}

// Exec provides a mock function with given fields: subCommand
func (_m *Helm) Exec(subCommand string) (string, error) {
	ret := _m.Called(subCommand)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(subCommand)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subCommand)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableChartVersions provides a mock function with given fields: chartName
func (_m *Helm) GetAvailableChartVersions(chartName string) ([]*interfaces.HelmAvailableChartVersion, error) {
	ret := _m.Called(chartName)

	var r0 []*interfaces.HelmAvailableChartVersion
	if rf, ok := ret.Get(0).(func(string) []*interfaces.HelmAvailableChartVersion); ok {
		r0 = rf(chartName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*interfaces.HelmAvailableChartVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chartName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReleaseStatus provides a mock function with given fields: chartName, chartNamespace
func (_m *Helm) GetReleaseStatus(chartName string, chartNamespace string) (*interfaces.HelmReleaseStatus, error) {
	ret := _m.Called(chartName, chartNamespace)

	var r0 *interfaces.HelmReleaseStatus
	if rf, ok := ret.Get(0).(func(string, string) *interfaces.HelmReleaseStatus); ok {
		r0 = rf(chartName, chartNamespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.HelmReleaseStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(chartName, chartNamespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields: execConfig, chartsSource
func (_m *Helm) Initialize(execConfig *interfaces.HelmExecConfig, chartsSource *interfaces.HelmChartsSource) error {
	ret := _m.Called(execConfig, chartsSource)

	var r0 error
	if rf, ok := ret.Get(0).(func(*interfaces.HelmExecConfig, *interfaces.HelmChartsSource) error); ok {
		r0 = rf(execConfig, chartsSource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
