// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// Kubernetes is an autogenerated mock type for the Kubernetes type
type Kubernetes struct {
	mock.Mock
}

// EnsureNamespace provides a mock function with given fields: name
func (_m *Kubernetes) EnsureNamespace(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindConfigMap provides a mock function with given fields: name, namespace, withKey, withValue
func (_m *Kubernetes) FindConfigMap(name string, namespace string, withKey string, withValue string) (*v1.ConfigMap, error) {
	ret := _m.Called(name, namespace, withKey, withValue)

	var r0 *v1.ConfigMap
	if rf, ok := ret.Get(0).(func(string, string, string, string) *v1.ConfigMap); ok {
		r0 = rf(name, namespace, withKey, withValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ConfigMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(name, namespace, withKey, withValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields: kubeconfigPath, kubeContext
func (_m *Kubernetes) Initialize(kubeconfigPath string, kubeContext string) error {
	ret := _m.Called(kubeconfigPath, kubeContext)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(kubeconfigPath, kubeContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitializeConfigMap provides a mock function with given fields: name, namespace, data
func (_m *Kubernetes) InitializeConfigMap(name string, namespace string, data map[string]string) (*v1.ConfigMap, error) {
	ret := _m.Called(name, namespace, data)

	var r0 *v1.ConfigMap
	if rf, ok := ret.Get(0).(func(string, string, map[string]string) *v1.ConfigMap); ok {
		r0 = rf(name, namespace, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ConfigMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, map[string]string) error); ok {
		r1 = rf(name, namespace, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRetryError provides a mock function with given fields: err
func (_m *Kubernetes) IsRetryError(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PatchConfigMap provides a mock function with given fields: name, namespace, data
func (_m *Kubernetes) PatchConfigMap(name string, namespace string, data map[string]string) (*v1.ConfigMap, error) {
	ret := _m.Called(name, namespace, data)

	var r0 *v1.ConfigMap
	if rf, ok := ret.Get(0).(func(string, string, map[string]string) *v1.ConfigMap); ok {
		r0 = rf(name, namespace, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ConfigMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, map[string]string) error); ok {
		r1 = rf(name, namespace, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
