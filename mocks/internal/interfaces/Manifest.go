// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/Cray-HPE/loftsman/internal/interfaces"
	logger "github.com/Cray-HPE/loftsman/internal/logger"

	mock "github.com/stretchr/testify/mock"
)

// Manifest is an autogenerated mock type for the Manifest type
type Manifest struct {
	mock.Mock
}

// Create provides a mock function with given fields: initializeCharts
func (_m *Manifest) Create(initializeCharts []string) (string, error) {
	ret := _m.Called(initializeCharts)

	var r0 string
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(initializeCharts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(initializeCharts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetName provides a mock function with given fields:
func (_m *Manifest) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Load provides a mock function with given fields: manifestContent
func (_m *Manifest) Load(manifestContent string) error {
	ret := _m.Called(manifestContent)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(manifestContent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Release provides a mock function with given fields: kubernetes, helm
func (_m *Manifest) Release(kubernetes interfaces.Kubernetes, helm interfaces.Helm) []*interfaces.ManifestReleaseError {
	ret := _m.Called(kubernetes, helm)

	var r0 []*interfaces.ManifestReleaseError
	if rf, ok := ret.Get(0).(func(interfaces.Kubernetes, interfaces.Helm) []*interfaces.ManifestReleaseError); ok {
		r0 = rf(kubernetes, helm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*interfaces.ManifestReleaseError)
		}
	}

	return r0
}

// SetLogger provides a mock function with given fields: log
func (_m *Manifest) SetLogger(log *logger.Logger) {
	_m.Called(log)
}

// SetTempDirectory provides a mock function with given fields: tempDirectory
func (_m *Manifest) SetTempDirectory(tempDirectory string) {
	_m.Called(tempDirectory)
}
